{"version":3,"sources":["data/drill_lookup.json","data/material_lookup.json","drill.ts"],"names":["module","exports","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","Aluminum","fr_offset","drill_sfm","Steel"],"mappings":"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","file":"drill.6a5458d7.js","sourceRoot":"../src","sourcesContent":["module.exports={\"#80\":.0135,\"#79\":.0145,\"#78\":.016,\"#77\":.018,\"#76\":.02,\"#75\":.021,\"#74\":.0225,\"#73\":.024,\"#72\":.025,\"#71\":.026,\"#70\":.028,\"#69\":.0292,\"#68\":.031,\"#67\":.032,\"#66\":.033,\"#65\":.035,\"#64\":.036,\"#63\":.037,\"#62\":.038,\"#61\":.039,\"#60\":.04,\"#59\":.041,\"#58\":.042,\"#56\":.0465,\"#55\":.052,\"#54\":.055,\"#53\":.0595,\"#52\":.0635,\"#51\":.067,\"#50\":.07,\"#49\":.073,\"#48\":.076,\"#47\":.0785,\"#46\":.081,\"#45\":.082,\"#44\":.086,\"#43\":.089,\"#42\":.0935,\"#41\":.096,\"#40\":.098,\"#39\":.0995,\"#38\":.1015,\"#37\":.104,\"#36\":.1065,\"#35\":.11,\"#34\":.111,\"#33\":.113,\"#32\":.116,\"#31\":.12,\"#30\":.1285,\"#29\":.136,\"#28\":.1405,\"#27\":.144,\"#26\":.147,\"#25\":.1495,\"#24\":.152,\"#23\":.154,\"#22\":.157,\"#21\":.159,\"#20\":.161,\"#19\":.166,\"#18\":.1695,\"#17\":.173,\"#16\":.177,\"#15\":.18,\"#14\":.182,\"#13\":.185,\"#12\":.189,\"#11\":.191,\"#10\":.1935,\"#9\":.196,\"#8\":.199,\"#7\":.201,\"#6\":.204,\"#5\":.2055,\"#4\":.209,\"#3\":.213,\"#2\":.221,\"#1\":.228,A:.234,B:.238,C:.242,D:.246,E:.25,F:.257,G:.261,H:.266,I:.272,J:.277,K:.281,L:.29,M:.295,N:.302,O:.316,P:.323,Q:.332,R:.339,S:.348,T:.358,U:.368,V:.377,W:.386,X:.397,Y:.404,Z:.413};","module.exports={Aluminum:{\"6061: Solution Treated and Aged\":{fr_offset:5,drill_sfm:350},\"6061: Cold Drawn\":{fr_offset:5,drill_sfm:400}},Steel:{\"4140, 4150: 250-300\":{fr_offset:3,drill_sfm:55}},\"Stainless Steel\":{\"316: 135-185\":{fr_offset:1,drill_sfm:50},\"203EZ, 303, 303Se, 303MA, 303Pb, 303Cu, 303 Plus X: 135-185\":{fr_offset:1,drill_sfm:55},\"203EZ, 303, 303Se, 303MA, 303Pb, 303Cu, 303 Plus X: 225-275\":{fr_offset:1,drill_sfm:50}}};","import drillLookup_ from \"./data/drill_lookup.json\"\nconst drillLookup = drillLookup_ as {\n    [key: string]: number\n};\nimport materialLookup_ from \"./data/material_lookup.json\"\nconst materialLookup = materialLookup_ as {\n    [key: string]: {\n        [key: string]: {\n            [key: string]: number\n        }\n    }\n};\n\ninterface FeedRateRange {\n    minDiameter: number  // inches, inclusive\n    maxDiameter: number  // inches, exclusive\n    minFr: number // inches per revolution\n    maxFr: number // inches per revolution\n}\n\n// Data from Machinery's Handbook 31 page 1128.\nconst feedRates = [\n    {\n        minDiameter: 0,\n        maxDiameter: .125,\n        minFr: .001,\n        maxFr: .003,\n    },\n    {\n        minDiameter: .125,\n        maxDiameter: .251,\n        minFr: .002,\n        maxFr: .006,\n    },\n    {\n        minDiameter: .251,\n        maxDiameter: .501,\n        minFr: .004,\n        maxFr: .010,\n    },\n    {\n        minDiameter: .501,\n        maxDiameter: 1.01,\n        minFr: .007,\n        maxFr: .015,\n    },\n    {\n        minDiameter: 1.01,\n        maxDiameter: 0,\n        minFr: .010,\n        maxFr: .025,\n    },\n];\n\nconst fractionRe = /((\\d+)\\s+)?(\\d+)\\/(\\d+)/;\nconst mmRe = /(\\d+(\\.\\d+)?)\\s*mm/;\n\nvar possibleEvents = new Set([\"input\", \"onpropertychange\", \"keyup\", \"change\", \"paste\"]);\n\nwindow.onload = () => {\n    const materialsMenu = document.getElementById(\"material\") as HTMLSelectElement;\n    const typesMenu = document.getElementById(\"material_type\") as HTMLSelectElement;\n    const drillInput = document.getElementById(\"drill_diameter\") as HTMLInputElement;\n    const calculator: Calculator = new Calculator(typesMenu, drillInput);\n    const page: DrillPage = new DrillPage(materialsMenu, typesMenu);\n    possibleEvents.forEach((eventName: string) => {\n        drillInput.addEventListener(eventName, () => {\n            calculator.calc()\n        })\n    });\n\n    for (let m in materialLookup) {\n        const option = document.createElement(\"option\") as HTMLOptionElement;\n        option.text = m;\n        materialsMenu.options.add(option);\n    }\n\n    materialsMenu.onchange = () => {\n        page.reloadTypes()\n        calculator.calc();\n    }\n    page.reloadTypes();\n\n    typesMenu.onchange = () => {\n        calculator.calc();\n    }\n    // calcs value on page reload if something was already entered\n    calculator.calc();\n};\n\ninterface TypeOption extends HTMLOptionElement {\n    type: {\n        [key: string]: number\n    }\n}\n\nclass DrillPage {\n    materialsMenu: HTMLSelectElement;\n    typesMenu: HTMLSelectElement;\n\n    constructor(materialsMenu: HTMLSelectElement, typesMenu: HTMLSelectElement) {\n        this.materialsMenu = materialsMenu;\n        this.typesMenu = typesMenu;\n    }\n\n    reloadTypes() {\n        removeOptions(this.typesMenu);\n        const material = this.materialsMenu.item(this.materialsMenu.selectedIndex) as HTMLOptionElement;\n        const types = materialLookup[material.text];\n        Object.keys(types).forEach(name => {\n            const option = document.createElement(\"option\") as TypeOption;\n            const sfm = types[name][\"drill_sfm\"]\n            option.text = `${name} (${sfm})`;\n            option.type = types[name];\n            this.typesMenu.options.add(option);\n        })\n    };\n\n};\n\nfunction removeOptions(selectElement: HTMLSelectElement) {\n    const L = selectElement.options.length - 1;\n    for (let i = L; i >= 0; i--) {\n        selectElement.remove(i);\n    }\n};\n\ninterface DrillReco {\n    rpm: number;\n    ipr: number;\n    ipm: number;\n    maxDepth: number;\n}\n\nclass Calculator {\n    typesMenu: HTMLOptionsCollection;\n    diameterElement: HTMLInputElement;\n\n    constructor(typessMenu: HTMLSelectElement, diameterElement: HTMLInputElement) {\n        this.typesMenu = typessMenu.options;\n        this.diameterElement = diameterElement;\n    }\n\n    calc() {\n        const typeOption = this.typesMenu.item(this.typesMenu.selectedIndex) as TypeOption;\n        const type = typeOption.type;\n        const sfm = Number(type[\"drill_sfm\"]);\n        setLabel(\"sfm\", displayNum(sfm))\n\n        let input = this.diameterElement.value as string;\n        let diameter = 0.0;\n        if (input in drillLookup) {\n            diameter = drillLookup[input]\n            setLabel(\"diameter_note\", `${input} has a diameter of ${diameter}`)\n        } else {\n            diameter = Number(input);\n            if (!diameter) {\n                let match = input.match(fractionRe);\n                if (match) {\n                    let inches = Number(match[2])\n                    if (!inches) {\n                        inches = 0\n                    }\n                    const numerator = Number(match[3])\n                    const denominator = Number(match[4])\n                    diameter = inches + numerator / denominator\n                    if (inches) {\n                        setLabel(\"diameter_note\", `Diameter ${inches} ${numerator}/${denominator}=${diameter}\"`)\n                    } else {\n                        setLabel(\"diameter_note\", `Diameter  ${numerator}/${denominator}=${diameter}\"`)\n                    }\n                } else {\n                    match = input.match(mmRe);\n                    if (match) {\n                        const mm = Number(match[1])\n                        diameter = mm / 25.4\n                        setLabel(\"diameter_note\", `Diameter ${mm}mm=${diameter.toPrecision(4)}\"`)\n                    } else {\n                        setLabel(\"diameter_note\", \"Enter diameter like .25, 1/4, 3mm, A or #23\")\n                    }\n                }\n            } else {\n                setLabel(\"diameter_note\", `Diameter ${diameter}\"`)\n            }\n        }\n\n        // the call to recommend below can throw and error if given an\n        // invalid diameter.  To avoid displaying invalid parameters,\n        // we start by zeroing out the display before the potential\n        // error.\n        setLabel(\"rpm\", \"--\")\n        setLabel(\"ipr\", \"--\")\n        setLabel(\"ipm\", \"--\")\n        setLabel(\"depth\", \"--\")\n\n        if (diameter) {\n            let reco = recommend(sfm, diameter, Number(type[\"fr_offset\"]));\n\n            setLabel(\"rpm\", displayNum(reco.rpm))\n            setLabel(\"ipr\", fixedDisplayNum(reco.ipr, 3))\n            setLabel(\"ipm\", fixedDisplayNum(reco.ipm, 1))\n            setLabel(\"depth\", `${fixedDisplayNum(reco.maxDepth, 3)}\"`)\n        }\n    }\n}\n\nfunction displayNum(value: number): string {\n    if (Number.isNaN(value) || value == Infinity || !value) {\n        return \"--\";\n    } else {\n        return String(value);\n    }\n}\n\nfunction fixedDisplayNum(value: number, precision: number): string {\n    if (Number.isNaN(value) || value == Infinity || !value) {\n        return \"--\";\n    } else {\n        return value.toFixed(precision);\n    }\n}\n\nexport function recommend(sfm: number, diameter: number, fr_offset: number): DrillReco {\n    const ipr = calcIpr(diameter, fr_offset);\n    const rpm = Math.round((3.8197 / diameter) * sfm)\n    return { rpm: rpm, ipr: ipr, ipm: ipr * rpm, maxDepth: diameter * 4 }\n}\n\n// diameter is inches\n// fr_offset is a value between 1 and 5\n//\n// once we find a range, we apply the fr_offset to it.  Imagining a range of 1 to 11, we distribute it like this:\n// range  fr_offset\n// 1      1\n// 2\n// 3\n// 3.5    2\n// 4\n// 5\n// 6      3\n// 7\n// 8\n// 8.5    4\n// 9\n// 10\n// 11     5\nexport function calcIpr(diameter: number, fr_offset: number): number {\n    if (fr_offset < 1 || fr_offset > 5) {\n        throw new RangeError('fr_offset must bet between 1 and 5: ${fr_offset} is invalid');\n    }\n    for (let frr of feedRates) {\n        if (diameter >= frr.minDiameter && (frr.maxDiameter == 0 || diameter < frr.maxDiameter)) {\n            if (fr_offset == 1) {\n                return frr.minFr;\n            }\n            if (fr_offset == 5) {\n                return frr.maxFr;\n            }\n            const offset = .25 * (fr_offset - 1);\n            const range = frr.maxFr - frr.minFr;\n            return frr.minFr + (range * offset);\n        }\n\n    }\n    throw new RangeError(`Unable to find range for diameter of ${diameter}`)\n}\n\nfunction setLabel(id: string, value: string) {\n    const output = document.getElementById(id) as HTMLLabelElement;\n    output.innerHTML = String(value)\n}\n"]}